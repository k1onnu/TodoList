import pytest
from unittest.mock import patch
from TodoApp import TodoApp

@pytest.fixture
def app():
    return TodoApp()


@patch("builtins.input", side_effect=["3", "4", "5"])
def test_complete_task_with_empty_list(mock_input, app, capsys):
    app.run()
    captured = capsys.readouterr()
    assert "üìã –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∑–∞–¥–∞—á." in captured.out


@patch("builtins.input", side_effect=["1", "–¢–µ—Å—Ç–æ–≤–∞—è", "3", "abc", "5"])
def test_complete_task_invalid_input(mock_input, app, capsys):
    app.run()
    captured = capsys.readouterr()
    assert "‚ùå Error: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏!" in captured.out


@patch("builtins.input", side_effect=["1", "–¢–µ—Å—Ç–æ–≤–∞—è", "2", "5"])
def test_show_tasks(mock_input, app, capsys):
    app.run()
    captured = capsys.readouterr()
    assert "–¢–µ—Å—Ç–æ–≤–∞—è" in captured.out  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ —Å–ø–∏—Å–∫–µ (–ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É 25)


@patch("builtins.input", side_effect=["999", "5"])
def test_invalid_choice(mock_input, app, capsys):
    app.run()
    captured = capsys.readouterr()
    assert "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!" in captured.out


@patch("builtins.input", side_effect=["1", "–¢–µ—Å—Ç–æ–≤–∞—è", "3", "1", "4", "5"])
def test_remove_completed_task(mock_input, app, capsys):
    app.run()
    captured = capsys.readouterr()
    assert "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!" in captured.out


@patch("builtins.input", side_effect=["5"])
def test_app_exit(mock_input, app, capsys):
    app.run()
    captured = capsys.readouterr()
    assert "üëã –í—ã—Ö–æ–¥..." in captured.out



